//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aim.Portal.ServicesProvider.USService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="USService.IUserSessionService")]
    public interface IUserSessionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/ExecuteService", ReplyAction="http://tempuri.org/IWCFService/ExecuteServiceResponse")]
        byte[] ExecuteService(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionService/CheckUserSession", ReplyAction="http://tempuri.org/IUserSessionService/CheckUserSessionResponse")]
        bool CheckUserSession(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionService/ReleaseSession", ReplyAction="http://tempuri.org/IUserSessionService/ReleaseSessionResponse")]
        bool ReleaseSession(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionService/AuthenticateUser", ReplyAction="http://tempuri.org/IUserSessionService/AuthenticateUserResponse")]
        string AuthenticateUser(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionService/SetPrepRelease", ReplyAction="http://tempuri.org/IUserSessionService/SetPrepReleaseResponse")]
        bool SetPrepRelease(string sessionID, Aim.Common.Authentication.LoginTypeEnum logMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionService/RefreshSession", ReplyAction="http://tempuri.org/IUserSessionService/RefreshSessionResponse")]
        bool RefreshSession(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionService/GetUserData", ReplyAction="http://tempuri.org/IUserSessionService/GetUserDataResponse")]
        byte[] GetUserData(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionService/GetSystemData", ReplyAction="http://tempuri.org/IUserSessionService/GetSystemDataResponse")]
        byte[] GetSystemData(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserSessionServiceChannel : Aim.Portal.ServicesProvider.USService.IUserSessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserSessionServiceClient : System.ServiceModel.ClientBase<Aim.Portal.ServicesProvider.USService.IUserSessionService>, Aim.Portal.ServicesProvider.USService.IUserSessionService {
        
        public UserSessionServiceClient() {
        }
        
        public UserSessionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserSessionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserSessionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserSessionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] ExecuteService(string msg) {
            return base.Channel.ExecuteService(msg);
        }
        
        public bool CheckUserSession(string sessionID) {
            return base.Channel.CheckUserSession(sessionID);
        }
        
        public bool ReleaseSession(string sessionID) {
            return base.Channel.ReleaseSession(sessionID);
        }
        
        public string AuthenticateUser(string message) {
            return base.Channel.AuthenticateUser(message);
        }
        
        public bool SetPrepRelease(string sessionID, Aim.Common.Authentication.LoginTypeEnum logMode) {
            return base.Channel.SetPrepRelease(sessionID, logMode);
        }
        
        public bool RefreshSession(string sessionID) {
            return base.Channel.RefreshSession(sessionID);
        }
        
        public byte[] GetUserData(string msg) {
            return base.Channel.GetUserData(msg);
        }
        
        public byte[] GetSystemData(string msg) {
            return base.Channel.GetSystemData(msg);
        }
    }
}
